/* tslint:disable */

/* eslint-disable */

/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { Configuration } from "./configuration";

/**
 *
 * @export
 * @interface ProjectCreateParams
 */
export interface ProjectCreateParams {
  /**
   *
   * @type {string}
   * @memberof ProjectCreateParams
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectCreateParams
   */
  status: string;
}
/**
 *
 * @export
 * @interface ProjectResponse
 */
export interface ProjectResponse {
  /**
   *
   * @type {string}
   * @memberof ProjectResponse
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ProjectResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ProjectResponse
   */
  status: string;
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {ProjectCreateParams} projectCreateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: async (
      projectCreateParams: ProjectCreateParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectCreateParams' is not null or undefined
      assertParamExists("createProject", "projectCreateParams", projectCreateParams);
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(projectCreateParams, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("findProject", "id", id);
      const localVarPath = `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {ProjectCreateParams} projectCreateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProject(
      projectCreateParams: ProjectCreateParams,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreateParams, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findProject(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findProject(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @param {ProjectCreateParams} projectCreateParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(projectCreateParams: ProjectCreateParams, options?: any): AxiosPromise<ProjectResponse> {
      return localVarFp.createProject(projectCreateParams, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProject(id: string, options?: any): AxiosPromise<ProjectResponse> {
      return localVarFp.findProject(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
  /**
   *
   * @param {ProjectCreateParams} projectCreateParams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public createProject(projectCreateParams: ProjectCreateParams, options?: AxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .createProject(projectCreateParams, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public findProject(id: string, options?: AxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .findProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
